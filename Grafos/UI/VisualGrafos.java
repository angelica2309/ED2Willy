/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Grafos.UI;

import Grafos.classes.*;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Willy
 */
public class VisualGrafos extends javax.swing.JFrame {

    protected Grafo<Integer> grafoNoPesado;
    protected GrafoP<Integer> grafoPesado;
    protected boolean esPesado;
    protected int tipo;

    /**
     * Creates new form VisualGrafos
     */
    public VisualGrafos() {
        initComponents();
    }

    private void actualizarTextVertices() {
        this.jTextArea1.setText("");
        if (!this.esPesado) {
            Grafo.mostrarVerticesYAristas(jTextArea1, grafoNoPesado);
        } else {
            GrafoP.mostrarVerticesYAristas(jTextArea1, grafoPesado);
        }
    }

    private List<Integer> listaDeVertices(String lista) {
        List<Integer> numeros = new LinkedList<>();
        while (lista.length() > 0) {
            int n = lista.length();
            int pos = lista.indexOf(",");
            pos = pos == -1 ? n : pos;
            Integer num = Integer.parseInt(lista.substring(0, pos));
            lista = pos == n ? "" : lista.substring(pos + 1, n);
            numeros.add(num);

        }
        return numeros;
    }

    protected class Arista<T extends Comparable<T>> {

        public T verticeA;
        public T verticeB;

        public Arista(T verticeA, T verticeB) {
            this.verticeA = verticeA;
            this.verticeB = verticeB;
        }

    }

    protected class AristaConPeso<T> extends Arista {

        public int peso;

        public AristaConPeso(Comparable verticeA, Comparable verticeB, int peso) {
            super(verticeA, verticeB);
            this.peso = peso;
        }
    }

    private List<Arista<Integer>> listaDeAristasSinPeso(String lista) {
        List<Arista<Integer>> aristas = new LinkedList<>();
        while (lista.length() > 0) {
            int n = lista.length();
            int a = lista.indexOf("(");
            int b = lista.indexOf(",");
            int pos = lista.indexOf(")");
            String A = lista.substring(a + 1, b);
            String B = lista.substring(b + 1, pos);
            int numA = Integer.parseInt(A);
            int numB = Integer.parseInt(B);
            Arista<Integer> ad = new Arista<>(numA, numB);
            aristas.add(ad);
            lista = pos + 2 > n ? "" : lista.substring(pos + 2, n);
        }
        return aristas;
    }

    private List<AristaConPeso<Integer>> listaDeAristasConPeso(String lista) {
        List<AristaConPeso<Integer>> aristas = new LinkedList<>();
        while (lista.length() > 0) {
            int n = lista.length();
            int a = lista.indexOf("(");
            int b = lista.indexOf(",");
            int c = lista.indexOf(";");
            int pos = lista.indexOf(")");
            String A = lista.substring(a + 1, b);
            String B = lista.substring(b + 1, c);
            String C = lista.substring(c + 1, pos);
            int numA = Integer.parseInt(A);
            int numB = Integer.parseInt(B);
            int peso = Integer.parseInt(C);
            AristaConPeso<Integer> ad = new AristaConPeso<>(numA, numB, peso);
            aristas.add(ad);
            lista = pos + 2 > n ? "" : lista.substring(pos + 2, n);
        }
        return aristas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jRadioGrafoNP = new javax.swing.JRadioButton();
        jRadioGrafoP = new javax.swing.JRadioButton();
        jRadioGrafoND = new javax.swing.JRadioButton();
        jRadioGrafoD = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonInstanciar = new javax.swing.JButton();
        textVerticeA = new javax.swing.JTextField();
        textVerticeB = new javax.swing.JTextField();
        jLabelVerticeA = new javax.swing.JLabel();
        jLabelVerticeB = new javax.swing.JLabel();
        textVertice = new javax.swing.JTextField();
        jLabelVertice = new javax.swing.JLabel();
        textMensaje = new javax.swing.JTextField();
        jLabelFuncion = new javax.swing.JLabel();
        textInstanciado = new javax.swing.JTextField();
        jLabelTipe = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonInsV = new javax.swing.JButton();
        jButtonInsA = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuInsertar = new javax.swing.JMenu();
        jMenuInsVert = new javax.swing.JMenuItem();
        jMenuInsAris = new javax.swing.JMenuItem();
        jMenuEliminar = new javax.swing.JMenu();
        jMenuElimVert = new javax.swing.JMenuItem();
        jMenuElimAris = new javax.swing.JMenuItem();
        jMenuMetodos = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuRecorBfs = new javax.swing.JMenuItem();
        jMenuRecorDfs = new javax.swing.JMenuItem();
        jMenuHayCiclo = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuIslas = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Grafo"));

        buttonGroup1.add(jRadioGrafoNP);
        jRadioGrafoNP.setSelected(true);
        jRadioGrafoNP.setText("No Pesado");

        buttonGroup1.add(jRadioGrafoP);
        jRadioGrafoP.setText("Pesado");

        buttonGroup2.add(jRadioGrafoND);
        jRadioGrafoND.setSelected(true);
        jRadioGrafoND.setText("No Dirigido");

        buttonGroup2.add(jRadioGrafoD);
        jRadioGrafoD.setText("Dirigido");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jRadioGrafoNP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioGrafoP))
            .addComponent(jRadioGrafoND)
            .addComponent(jRadioGrafoD)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioGrafoNP)
                    .addComponent(jRadioGrafoP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioGrafoND)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioGrafoD)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enteros", "Reales", "Caracteres", "Cadenas" }));
        jComboBox1.setEnabled(false);

        jButtonInstanciar.setText("Instanciar");
        jButtonInstanciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInstanciarActionPerformed(evt);
            }
        });

        textVerticeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textVerticeBActionPerformed(evt);
            }
        });

        jLabelVerticeA.setText("Vertice Partida");

        jLabelVerticeB.setText("Vertice Destino");

        jLabelVertice.setText("Vertice");

        jLabelFuncion.setText("Funcion");

        textInstanciado.setEditable(false);
        textInstanciado.setBackground(new java.awt.Color(255, 255, 255));
        textInstanciado.setText("null");

        jLabelTipe.setText("Instanciado");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Vertices y Lista de Adyacencia"));
        jScrollPane2.setViewportView(jTextArea1);

        jButtonInsV.setText("Insertar Varios Vertices");
        jButtonInsV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsVActionPerformed(evt);
            }
        });

        jButtonInsA.setText("Insertar Varias Aristas");
        jButtonInsA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsAActionPerformed(evt);
            }
        });

        jButton1.setText("Prueba");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenuInsertar.setText("Insertar");

        jMenuInsVert.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuInsVert.setText("Vertice");
        jMenuInsVert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuInsVertActionPerformed(evt);
            }
        });
        jMenuInsertar.add(jMenuInsVert);

        jMenuInsAris.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuInsAris.setText("Arista");
        jMenuInsAris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuInsArisActionPerformed(evt);
            }
        });
        jMenuInsertar.add(jMenuInsAris);

        jMenuBar1.add(jMenuInsertar);

        jMenuEliminar.setText("Eliminar");

        jMenuElimVert.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuElimVert.setText("Vertice");
        jMenuElimVert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuElimVertActionPerformed(evt);
            }
        });
        jMenuEliminar.add(jMenuElimVert);

        jMenuElimAris.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuElimAris.setText("Arista");
        jMenuElimAris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuElimArisActionPerformed(evt);
            }
        });
        jMenuEliminar.add(jMenuElimAris);

        jMenuBar1.add(jMenuEliminar);

        jMenuMetodos.setText("Metodos");

        jMenuItem2.setText("Mostrar Vertices y Aristas");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem2);

        jMenuItem13.setText("Cantidad de aristas");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem13);

        jMenuRecorBfs.setText("Recorrido BFS");
        jMenuRecorBfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRecorBfsActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuRecorBfs);

        jMenuRecorDfs.setText("Recorrido DFS");
        jMenuRecorDfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRecorDfsActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuRecorDfs);

        jMenuHayCiclo.setText("Hay Ciclo en ese vertice");
        jMenuHayCiclo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHayCicloActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuHayCiclo);

        jMenuItem11.setText("Hay ciclo en todo el grafo?");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem11);

        jMenuIslas.setText("Islas del grafo");
        jMenuIslas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuIslasActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuIslas);

        jMenuItem12.setText("Es fuertemente conexo(Solo Dirigidos)");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem12);

        jMenuItem10.setText("Es debilmente conexo(Solo Dirigidos)");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem10);

        jMenuItem3.setText("Algoritmo de Warshall(Dirigido No Pesado)");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem3);

        jMenuItem1.setText("Ord.Topologico(Dirigido No Pesado)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem1);

        jMenuItem4.setText("Costo Minimo(Dirigido Pesado)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem4);

        jMenuItem5.setText("Camino Costo Minimo(Dirigido Pesado)");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem5);

        jMenuItem6.setText("Algoritmo de Floyd(Dirigido Pesado)");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem6);

        jMenuItem7.setText("Algoritmo de Kruskal(No dirigido Pesado)");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem7);

        jMenuItem8.setText("Arbol de Expansion Prim(No dirigido Pesado)");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem8);

        jMenuItem9.setText("Bosque de Expansion(No dirigido Pesado)");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenuMetodos.add(jMenuItem9);

        jMenuBar1.add(jMenuMetodos);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textVerticeA, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelVerticeA))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textVerticeB, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelVerticeB)))
                                    .addComponent(textVertice, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelVertice))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonInsV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonInsA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonInstanciar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelFuncion)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelTipe)
                                    .addComponent(textInstanciado, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabelVertice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textVertice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonInsV))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelVerticeA)
                            .addComponent(jLabelVerticeB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textVerticeA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textVerticeB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonInsA)
                            .addComponent(jButton1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFuncion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInstanciar)
                    .addComponent(textMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTipe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textInstanciado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textVerticeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textVerticeBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textVerticeBActionPerformed

    private void jButtonInstanciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInstanciarActionPerformed
        // TODO add your handling code here:
        String instancia = "";
        String dirigido = "";
        esPesado = !jRadioGrafoNP.isSelected();
        if (jRadioGrafoNP.isSelected()) {
            instancia += "No pesado";
            if (jRadioGrafoND.isSelected()) {
                grafoNoPesado = new GrafoNoDirigido();
                dirigido = " no dirigido";
            } else {
                grafoNoPesado = new GrafoDirigido();
                dirigido += " dirigido";
            }
        } else {
            instancia += "Pesado";
            if (jRadioGrafoND.isSelected()) {
                grafoPesado = new GrafoPNoDirigido();
                dirigido += " no dirigido";
            } else {
                grafoPesado = new GrafoPDirigido();
                dirigido += " dirigido";
            }
        }
        textInstanciado.setText(instancia + dirigido);
        this.actualizarTextVertices();
    }//GEN-LAST:event_jButtonInstanciarActionPerformed

    private void jMenuInsVertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuInsVertActionPerformed
        // TODO add your handling code here:
        String verticeText = this.textVertice.getText();
        Comparable vertice = Integer.parseInt(verticeText);
        boolean insertado;
        if (this.esPesado) {
            insertado = this.grafoPesado.insertarVertice((Integer) vertice);
        } else {
            insertado = this.grafoNoPesado.insertarVertice((Integer) vertice);
        }
        textMensaje.setText("Vertice(" + verticeText + ") insertado: " + insertado);
        this.actualizarTextVertices();
    }//GEN-LAST:event_jMenuInsVertActionPerformed

    private void jMenuInsArisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuInsArisActionPerformed
        // TODO add your handling code here:
        String verticeAText = this.textVerticeA.getText();
        String verticeBText = this.textVerticeB.getText();
        Comparable verticeA = Integer.parseInt(verticeAText);
        Comparable verticeB = Integer.parseInt(verticeBText);
        boolean insertado;
        if (this.esPesado) {
            int peso = Integer.parseInt(
                    JOptionPane.showInputDialog(this, "Peso de la arista", "Valor: "));
            insertado = this.grafoPesado.insertarArista((Integer) verticeA, (Integer) verticeB, peso);
        } else {
            insertado = this.grafoNoPesado.insertarArista((Integer) verticeA, (Integer) verticeB);
        }
        textMensaje.setText("Arista(" + verticeAText + "," + verticeBText + ") insertada: " + insertado);
        this.actualizarTextVertices();
    }//GEN-LAST:event_jMenuInsArisActionPerformed

    private void jMenuElimVertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuElimVertActionPerformed
        // TODO add your handling code here:
        String verticeText = this.textVertice.getText();
        Comparable vertice = Integer.parseInt(verticeText);
        boolean eliminado;
        if (this.esPesado) {
            eliminado = this.grafoPesado.eliminarVertice((Integer) vertice);
        } else {
            eliminado = this.grafoNoPesado.eliminarVertice((Integer) vertice);
        }
        textMensaje.setText("Vertice(" + verticeText + ") eliminado: " + eliminado);
        this.actualizarTextVertices();
    }//GEN-LAST:event_jMenuElimVertActionPerformed

    private void jMenuElimArisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuElimArisActionPerformed
        // TODO add your handling code here:
        String verticeAText = this.textVerticeA.getText();
        String verticeBText = this.textVerticeB.getText();
        Comparable verticeA = Integer.parseInt(verticeAText);
        Comparable verticeB = Integer.parseInt(verticeBText);
        boolean eliminado;
        if (this.esPesado) {
            eliminado = this.grafoPesado.eliminarArista((Integer) verticeA, (Integer) verticeB);
        } else {
            eliminado = this.grafoNoPesado.eliminarArista((Integer) verticeA, (Integer) verticeB);
        }
        textMensaje.setText("Arista(" + verticeAText + "," + verticeBText + ") eliminada: " + eliminado);
        this.actualizarTextVertices();
    }//GEN-LAST:event_jMenuElimArisActionPerformed

    private void jMenuRecorBfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRecorBfsActionPerformed
        // TODO add your handling code here:
        Integer vertice = (Integer) Integer.parseInt(this.textVertice.getText());
        List<Integer> lista = esPesado ? grafoPesado.recorridoBfs(vertice) : grafoNoPesado.recorridoBfs(vertice);
        this.textMensaje.setText("Recorrido Bfs vertice(" + vertice.toString() + "): " + lista);

    }//GEN-LAST:event_jMenuRecorBfsActionPerformed

    private void jMenuRecorDfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRecorDfsActionPerformed
        // TODO add your handling code here:
        Integer vertice = (Integer) Integer.parseInt(this.textVertice.getText());
        List<Integer> lista = esPesado ? grafoPesado.recorridoDfs(vertice) : grafoNoPesado.recorridoDfsIterativo(vertice);
        this.textMensaje.setText("Recorrido Dfs vertice(" + vertice.toString() + "): " + lista);
    }//GEN-LAST:event_jMenuRecorDfsActionPerformed

    private void jMenuHayCicloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHayCicloActionPerformed
        // TODO add your handling code here:
        Integer vertice = (Integer) Integer.parseInt(this.textVertice.getText());
        boolean hayCiclo = esPesado ? this.grafoPesado.hayCiclo(vertice) : this.grafoNoPesado.hayCiclo(vertice);
        this.textMensaje.setText("Hay ciclo en el vertice(" + vertice.toString() + "): " + hayCiclo);
    }//GEN-LAST:event_jMenuHayCicloActionPerformed

    private void jMenuIslasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuIslasActionPerformed
        // TODO add your handling code here:
        if (esPesado) {
            this.textMensaje.setText("Islas del grafo: " + grafoPesado.islas());
            grafoPesado.imprimirIsla();
        } else {
            this.textMensaje.setText("Islas del grafo: " + grafoNoPesado.islas());
        }
    }//GEN-LAST:event_jMenuIslasActionPerformed

    private void jButtonInsVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsVActionPerformed
        // TODO add your handling code here:
        String vertices
                = JOptionPane.showInputDialog(this, "Vertices", "");
        List<Integer> lista = this.listaDeVertices(vertices);
        for (int i = 0; i < lista.size(); i++) {
            if (this.esPesado) {
                this.grafoPesado.insertarVertice(lista.get(i));
            } else {
                this.grafoNoPesado.insertarVertice(lista.get(i));
            }
        }
        this.actualizarTextVertices();
    }//GEN-LAST:event_jButtonInsVActionPerformed

    private void jButtonInsAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsAActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            String aristas
                    = JOptionPane.showInputDialog(this, "Aristas con peso", "");
            List<AristaConPeso<Integer>> lista = this.listaDeAristasConPeso(aristas);
            for (int i = 0; i < lista.size(); i++) {
                AristaConPeso<Integer> arista = lista.get(i);
                this.grafoPesado.insertarArista((Integer) arista.verticeA, (Integer) arista.verticeB, arista.peso);
            }
        } else {
            String aristas
                    = JOptionPane.showInputDialog(this, "Aristas sin peso", "");
            List<Arista<Integer>> lista = this.listaDeAristasSinPeso(aristas);
            for (int i = 0; i < lista.size(); i++) {
                Arista<Integer> arista = lista.get(i);
                this.grafoNoPesado.insertarArista(arista.verticeA, arista.verticeB);
            }
        }
        this.actualizarTextVertices();
    }//GEN-LAST:event_jButtonInsAActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (!this.esPesado) {
            if (grafoNoPesado instanceof GrafoDirigido) {
                this.textMensaje.setText("Ord.Topologico: " + ((GrafoDirigido) grafoNoPesado).ordenamientoTopologico());
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.actualizarTextVertices();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (!this.esPesado) {
            if (grafoNoPesado instanceof GrafoDirigido) {
                ((GrafoDirigido) grafoNoPesado).showAlgortimoDeWarshall(jTextArea1);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            if (grafoPesado instanceof GrafoPDirigido) {
                String vertA = this.textVerticeA.getText();
                String vertB = this.textVerticeB.getText();
                Comparable a = (Integer) Integer.parseInt(vertA);
                Comparable b = (Integer) Integer.parseInt(vertB);
                double costo = ((GrafoPDirigido) grafoPesado).costoMinimo(a, b);
                String strCosto = costo == GrafoP.INFINITO ? "∞" : Double.toString(costo);
                this.textMensaje.setText("Costo minimo de(" + vertA + ")->(" + vertB + "): " + strCosto);
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            if (grafoPesado instanceof GrafoPDirigido) {
                String vertA = this.textVerticeA.getText();
                String vertB = this.textVerticeB.getText();
                Comparable a = (Integer) Integer.parseInt(vertA);
                Comparable b = (Integer) Integer.parseInt(vertB);
                List<Integer> camino = ((GrafoPDirigido) grafoPesado).caminoCostoMinimoFloyd(a, b);
                this.textMensaje.setText("Camino de costo minimo de(" + vertA + ")->(" + vertB + "): " + camino);
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            if (grafoPesado instanceof GrafoPDirigido) {
                ((GrafoPDirigido) grafoPesado).showAlgoritmoDeFloyd(jTextArea1);
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            if (grafoPesado instanceof GrafoPNoDirigido) {
                GrafoPNoDirigido arbol = ((GrafoPNoDirigido) grafoPesado).arbolDeExpansionKruskal();
                GrafoP.mostrarVerticesYAristas(jTextArea1, arbol);
            }
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            if (grafoPesado instanceof GrafoPNoDirigido) {
                GrafoPNoDirigido bosque = ((GrafoPNoDirigido) grafoPesado).bosqueDeExpansionPrim();
                GrafoP.mostrarVerticesYAristas(jTextArea1, bosque);
            }
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        if (this.esPesado) {
            if (grafoPesado instanceof GrafoPNoDirigido) {
                Integer vertice = Integer.parseInt(this.textVertice.getText());
                GrafoPNoDirigido arbol = ((GrafoPNoDirigido) grafoPesado).arbolDeExpansionPrim(vertice);
                GrafoP.mostrarVerticesYAristas(jTextArea1, arbol);
            }
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Boolean hayCiclo;
        Integer vertice = Integer.parseInt(this.textVertice.getText());
        hayCiclo = ((GrafoPDirigido) grafoPesado).hayCiclo(vertice);
        this.textMensaje.setText(hayCiclo.toString());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        if (esPesado) {
            if (grafoPesado instanceof GrafoPDirigido) {
                textMensaje.setText("Es debilmente conexo: " + ((GrafoPDirigido) grafoPesado).esDebilmenteConexo());
            }
        } else {
            if (grafoNoPesado instanceof GrafoDirigido) {
                textMensaje.setText("Es debilmente conexo: " + ((GrafoDirigido) grafoNoPesado).esDebilmenteConexo());
            }
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        if (esPesado) {
            textMensaje.setText("Hay ciclo en todo el grafo: " + grafoPesado.hayCicloEnElGrafo());
        } else {
            textMensaje.setText("Hay ciclo en todo el grafo: " + grafoNoPesado.hayCicloEnElGrafo());
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        if (esPesado) {
            if (grafoPesado instanceof GrafoPDirigido) {
                textMensaje.setText("Es fuertemente conexo: " + ((GrafoPDirigido) grafoPesado).esFuertementeConexo());
            }
        } else {
            if (grafoNoPesado instanceof GrafoDirigido) {
                textMensaje.setText("Es fuertemente conexo: " + ((GrafoDirigido) grafoNoPesado).esFuertementeConexo());
            }
        }
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        if(esPesado){
            textMensaje.setText("Cantidad de aristas: "+grafoPesado.cantidadDeAristas());
        }else{
            textMensaje.setText("Cantidad de aristas: "+grafoNoPesado.cantidadDeAristas());
        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualGrafos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                Logger.getLogger(VisualGrafos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            new VisualGrafos().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonInsA;
    private javax.swing.JButton jButtonInsV;
    private javax.swing.JButton jButtonInstanciar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabelFuncion;
    private javax.swing.JLabel jLabelTipe;
    private javax.swing.JLabel jLabelVertice;
    private javax.swing.JLabel jLabelVerticeA;
    private javax.swing.JLabel jLabelVerticeB;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuElimAris;
    private javax.swing.JMenuItem jMenuElimVert;
    private javax.swing.JMenu jMenuEliminar;
    private javax.swing.JMenuItem jMenuHayCiclo;
    private javax.swing.JMenuItem jMenuInsAris;
    private javax.swing.JMenuItem jMenuInsVert;
    private javax.swing.JMenu jMenuInsertar;
    private javax.swing.JMenuItem jMenuIslas;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenu jMenuMetodos;
    private javax.swing.JMenuItem jMenuRecorBfs;
    private javax.swing.JMenuItem jMenuRecorDfs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioGrafoD;
    private javax.swing.JRadioButton jRadioGrafoND;
    private javax.swing.JRadioButton jRadioGrafoNP;
    private javax.swing.JRadioButton jRadioGrafoP;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField textInstanciado;
    private javax.swing.JTextField textMensaje;
    private javax.swing.JTextField textVertice;
    private javax.swing.JTextField textVerticeA;
    private javax.swing.JTextField textVerticeB;
    // End of variables declaration//GEN-END:variables
}
